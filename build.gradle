apply plugin: 'java'
apply plugin: 'license'

sourceCompatibility = 1.8
group = "org.tools4j"
version = '1.0-SNAPSHOT'
archivesBaseName = "tools4j-event-sourcing"

def generatedSrcName = "generated-src"
def generatedSrc = "$buildDir/$generatedSrcName"

jar {
    manifest {
        attributes 'Implementation-Title': 'tools4j-event-sourcing', 'Implementation-Version': version
    }
}

configurations{
    codecGeneration
}

sourceSets {
    main.java.srcDirs += file(generatedSrc)
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	
	dependencies {
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
		classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
	}
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'build/repositories'
       }
    }
}

task copyLicense(type: Copy) {
    from('.')
    into('build/resources/main/')
    include('LICENSE.md')
    rename('LICENSE.md', 'LICENSE.txt')
}
task copyLicenseToSrc(type: Copy) {
    from('build/resources/main/')
    into(generatedSrc)
    include('LICENSE.txt')
}

license {
    header rootProject.file('src/main/resources/LICENSE.template')
    strictCheck true
	include "**/*.java"
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
}

task(generateCodecs, type: JavaExec) {
    main = 'uk.co.real_logic.sbe.SbeTool'
    classpath = configurations.codecGeneration
    systemProperties(
            'sbe.output.dir': generatedSrc,
            'sbe.target.language': 'Java',
            'sbe.java.generate.interfaces': 'false',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': 'src/main/resources/fpl/sbe.xsd'
    )
    args = ['src/main/resources/sbe-schema.xml']
}

task(generateTestCodecs, type: JavaExec) {
    main = 'uk.co.real_logic.sbe.SbeTool'
    classpath = configurations.codecGeneration
    systemProperties(
            'sbe.output.dir': generatedSrc,
            'sbe.target.language': 'Java',
            'sbe.java.generate.interfaces': 'false',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': 'src/main/resources/fpl/sbe.xsd'
    )
    args = ['src/test/resources/sbe-test-schema.xml']
}


copyLicense.dependsOn processResources
copyLicenseToSrc.dependsOn copyLicense
compileJava.dependsOn licenseFormat,copyLicense,copyLicenseToSrc,generateCodecs
compileTestJava.dependsOn generateTestCodecs

javadoc {
	options.showFromPackage()
	options.linkSource()
	options.links("http://docs.oracle.com/javase/8/docs/api/");
	options.windowTitle = "tools4j event-sourcing API ${version}"
	options.overview = "src/main/java/overview.html";
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

dependencies {
    compile 'org.tools4j:mmap-region:1.0-SNAPSHOT'
    compile 'org.tools4j:tools4j-nobark:1.4'
    compile 'org.agrona:agrona:0.9.13'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'io.aeron:aeron-all:1.8.0'
    testCompile 'org.hdrhistogram:HdrHistogram:2.1.9'
    testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.15.0'
    testCompile 'org.tools4j:tools4j-spockito:1.6'
    testCompile 'org.assertj:assertj-core:3.4.1'
    codecGeneration 'uk.co.real-logic:sbe-all:1.7.8'
}